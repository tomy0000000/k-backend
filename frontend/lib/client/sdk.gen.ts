// This file is auto-generated by @hey-api/openapi-ts

import { type Options, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { LoginTokenPostData, LoginTokenPostResponse, LoginTokenPostError, CheckCredentialClientGetData, CheckCredentialClientGetResponse, ReadAccountsAccountsGetData, ReadAccountsAccountsGetResponse, UpdateAccountAccountsPatchData, UpdateAccountAccountsPatchResponse, UpdateAccountAccountsPatchError, CreateAccountAccountsPostData, CreateAccountAccountsPostResponse, CreateAccountAccountsPostError, ReadCurrenciesCurrenciesGetData, ReadCurrenciesCurrenciesGetResponse, CreateCurrencyCurrenciesPostData, CreateCurrencyCurrenciesPostResponse, CreateCurrencyCurrenciesPostError, ReadCategoriesCategoriesGetData, ReadCategoriesCategoriesGetResponse, UpdateCategoryCategoriesPatchData, UpdateCategoryCategoriesPatchResponse, UpdateCategoryCategoriesPatchError, CreateCategoryCategoriesPostData, CreateCategoryCategoriesPostResponse, CreateCategoryCategoriesPostError, ReadCategoryCategoriesIdGetData, ReadCategoryCategoriesIdGetResponse, ReadCategoryCategoriesIdGetError, ReadPaymentsPaymentsGetData, ReadPaymentsPaymentsGetResponse, ReadPaymentsPaymentsGetError, UpdatePaymentPaymentsPatchData, UpdatePaymentPaymentsPatchResponse, UpdatePaymentPaymentsPatchError, CreatePaymentPaymentsPostData, CreatePaymentPaymentsPostResponse, CreatePaymentPaymentsPostError, DeletePaymentPaymentsIdDeleteData, DeletePaymentPaymentsIdDeleteError, ReadPaymentPaymentsIdGetData, ReadPaymentPaymentsIdGetResponse, ReadPaymentPaymentsIdGetError, ReadPaymentServiceProvidersPspsGetData, ReadPaymentServiceProvidersPspsGetResponse, CreatePaymentServiceProviderPspsPostData, CreatePaymentServiceProviderPspsPostResponse, CreatePaymentServiceProviderPspsPostError, ReadTransactionsTransactionsGetData, ReadTransactionsTransactionsGetResponse, ReadTransactionsTransactionsGetError, ReadInvoicesTwInvoiceGetData, ReadInvoicesTwInvoiceGetResponse, UpdateInvoiceTwInvoicePatchData, UpdateInvoiceTwInvoicePatchResponse, UpdateInvoiceTwInvoicePatchError, CreateOrUpdateInvoicesTwInvoicePostData, CreateOrUpdateInvoicesTwInvoicePostResponse, CreateOrUpdateInvoicesTwInvoicePostError, ReadInvoiceDetailsTwInvoiceNumberGetData, ReadInvoiceDetailsTwInvoiceNumberGetResponse, ReadInvoiceDetailsTwInvoiceNumberGetError, CreateOrUpdateInvoiceDetailsTwInvoiceNumberPostData, CreateOrUpdateInvoiceDetailsTwInvoiceNumberPostResponse, CreateOrUpdateInvoiceDetailsTwInvoiceNumberPostError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * Login
 */
export const loginTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginTokenPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginTokenPostResponse, LoginTokenPostError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Check Credential
 */
export const checkCredentialClientGet = <ThrowOnError extends boolean = false>(options?: Options<CheckCredentialClientGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CheckCredentialClientGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/client',
        ...options
    });
};

/**
 * Read Accounts
 */
export const readAccountsAccountsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadAccountsAccountsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadAccountsAccountsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/accounts',
        ...options
    });
};

/**
 * Update Account
 */
export const updateAccountAccountsPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateAccountAccountsPatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<UpdateAccountAccountsPatchResponse, UpdateAccountAccountsPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/accounts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Account
 */
export const createAccountAccountsPost = <ThrowOnError extends boolean = false>(options: Options<CreateAccountAccountsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateAccountAccountsPostResponse, CreateAccountAccountsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/accounts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Currencies
 */
export const readCurrenciesCurrenciesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadCurrenciesCurrenciesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadCurrenciesCurrenciesGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/currencies',
        ...options
    });
};

/**
 * Create Currency
 */
export const createCurrencyCurrenciesPost = <ThrowOnError extends boolean = false>(options: Options<CreateCurrencyCurrenciesPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateCurrencyCurrenciesPostResponse, CreateCurrencyCurrenciesPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/currencies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Categories
 */
export const readCategoriesCategoriesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadCategoriesCategoriesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadCategoriesCategoriesGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/categories',
        ...options
    });
};

/**
 * Update Category
 */
export const updateCategoryCategoriesPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateCategoryCategoriesPatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<UpdateCategoryCategoriesPatchResponse, UpdateCategoryCategoriesPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Category
 */
export const createCategoryCategoriesPost = <ThrowOnError extends boolean = false>(options: Options<CreateCategoryCategoriesPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateCategoryCategoriesPostResponse, CreateCategoryCategoriesPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Category
 */
export const readCategoryCategoriesIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadCategoryCategoriesIdGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadCategoryCategoriesIdGetResponse, ReadCategoryCategoriesIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/categories/{id}',
        ...options
    });
};

/**
 * Read Payments
 */
export const readPaymentsPaymentsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadPaymentsPaymentsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadPaymentsPaymentsGetResponse, ReadPaymentsPaymentsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/payments',
        ...options
    });
};

/**
 * Update Payment
 */
export const updatePaymentPaymentsPatch = <ThrowOnError extends boolean = false>(options: Options<UpdatePaymentPaymentsPatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<UpdatePaymentPaymentsPatchResponse, UpdatePaymentPaymentsPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/payments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Payment
 */
export const createPaymentPaymentsPost = <ThrowOnError extends boolean = false>(options: Options<CreatePaymentPaymentsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreatePaymentPaymentsPostResponse, CreatePaymentPaymentsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/payments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Payment
 */
export const deletePaymentPaymentsIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeletePaymentPaymentsIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeletePaymentPaymentsIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/payments/{id}',
        ...options
    });
};

/**
 * Read Payment
 */
export const readPaymentPaymentsIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadPaymentPaymentsIdGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadPaymentPaymentsIdGetResponse, ReadPaymentPaymentsIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/payments/{id}',
        ...options
    });
};

/**
 * Read Payment Service Providers
 */
export const readPaymentServiceProvidersPspsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadPaymentServiceProvidersPspsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadPaymentServiceProvidersPspsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/psps',
        ...options
    });
};

/**
 * Create Payment Service Provider
 */
export const createPaymentServiceProviderPspsPost = <ThrowOnError extends boolean = false>(options: Options<CreatePaymentServiceProviderPspsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreatePaymentServiceProviderPspsPostResponse, CreatePaymentServiceProviderPspsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/psps',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Transactions
 */
export const readTransactionsTransactionsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadTransactionsTransactionsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadTransactionsTransactionsGetResponse, ReadTransactionsTransactionsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/transactions',
        ...options
    });
};

/**
 * Read Invoices
 */
export const readInvoicesTwInvoiceGet = <ThrowOnError extends boolean = false>(options?: Options<ReadInvoicesTwInvoiceGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadInvoicesTwInvoiceGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tw-invoice',
        ...options
    });
};

/**
 * Update Invoice
 */
export const updateInvoiceTwInvoicePatch = <ThrowOnError extends boolean = false>(options: Options<UpdateInvoiceTwInvoicePatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<UpdateInvoiceTwInvoicePatchResponse, UpdateInvoiceTwInvoicePatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tw-invoice',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Or Update Invoices
 * Create or update invoices
 *
 * New invoices will be returned with all fields, while existing invoices will be
 * returned with only updated fields.
 */
export const createOrUpdateInvoicesTwInvoicePost = <ThrowOnError extends boolean = false>(options: Options<CreateOrUpdateInvoicesTwInvoicePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateOrUpdateInvoicesTwInvoicePostResponse, CreateOrUpdateInvoicesTwInvoicePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tw-invoice',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Invoice Details
 */
export const readInvoiceDetailsTwInvoiceNumberGet = <ThrowOnError extends boolean = false>(options: Options<ReadInvoiceDetailsTwInvoiceNumberGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadInvoiceDetailsTwInvoiceNumberGetResponse, ReadInvoiceDetailsTwInvoiceNumberGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tw-invoice/{number}',
        ...options
    });
};

/**
 * Create Or Update Invoice Details
 * Create or update invoice details
 *
 * New details will be returned with all fields, while existing details will be
 * returned with only updated fields.
 */
export const createOrUpdateInvoiceDetailsTwInvoiceNumberPost = <ThrowOnError extends boolean = false>(options: Options<CreateOrUpdateInvoiceDetailsTwInvoiceNumberPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateOrUpdateInvoiceDetailsTwInvoiceNumberPostResponse, CreateOrUpdateInvoiceDetailsTwInvoiceNumberPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tw-invoice/{number}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};
